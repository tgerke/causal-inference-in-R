{
  "hash": "81e37f1980eaa7f3c475b2ae087df6df",
  "result": {
    "markdown": "# Continuous exposures {#sec-continuous-exposures}\n\n\n\n\n\n## Calculating propensity scores for continuous exposures\n\nPropensity scores generalize to many other types of exposures, including continuous exposures.\nAt its heart, the workflow is the same: we fit a model where the exposure is the outcome and then use that model to weight a second outcome model.\nFor continuous exposures, linear regression is the simplest way to create propensities.\nInstead of probabilities, we use the cumulative density function.\nThen, we use this density to weight the outcome model.\n\nLet's take a look at an example.\nIn the `touringplans` data set, we have information about the posted waiting times for rides.\nWe also have a limited amount of data on the observed actual times.\nThe question we will consider is this: Do posted wait times for the Seven Dwarfs Mine Train at 8 am affect actual wait times at 9 am?\nHere's our DAG:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Proposed DAG for the relationship between posted wait in the morning at a particular park and the average wait time between 5 pm and 6 pm.](13-continuous-exposures_files/figure-html/fig-dag-avg-wait-1.png){#fig-dag-avg-wait width=672}\n:::\n:::\n\n\nIn @fig-dag-avg-wait, we're assuming that our primary confounders are when the park closes, historic high temperatures, whether or not the ride has extra magic morning hours, and the ticket season.\nThis is the only minimal adjustment set in the DAG, as well.\nThe confounders precede the exposure and outcome, and (by definition) the exposure precedes the outcome.\nThe average posted wait time is, in theory, a manipulable exposure because the park could post a time different from what they expect.\nThe adjustment set\n\nThe model is similar to the binary exposure case, but we need to use linear regression, as the posted time is a continuous variable.\nSince we're not using probabilities, we'll calculate denominators for our weights from a normal density.\nWe then calculate the denominator using the `dnorm()` function, which calculates the normal density for the `exposure`, using `.fitted` as the mean and `mean(.sigma)` as the SD.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(\n  exposure ~ confounder_1 + confounder_2,\n  data = df\n) |>\n  augment(data = df) |>\n  mutate(\n    denominator = dnorm(exposure, .fitted, mean(.sigma, na.rm = TRUE))\n  )\n```\n:::\n\n\n## Diagnostics and stabilization\n\nContinuous exposure weights, however, are very sensitive to modeling choices.\nOne problem, in particular, is the existence of extreme weights, an issue that can also affect other types of exposures.\nWhen some observations have extreme weights, the propensities are *destabilized,* which results in wider confidence intervals.\nWe can stabilize them using the marginal distribution of the exposure.\nA common way to calculate the marginal distribution for propensity scores is to use a regression model with no predictors.\n\n::: callout-caution\nExtreme weights destabilize estimates, resulting in wider confidence intervals.\nExtreme weights can be an issue for any time of weight (including those for binary and other types of exposures) that is not bounded.\nBounded weights like the ATO (which are bounded to 0 and 1) do not have this problem, however---one of their many benefits.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for continuous exposures\nlm(\n  exposure ~ 1,\n  data = df\n) |>\n  augment(data = df) |>\n  transmute(\n    numerator = dnorm(exposure, .fitted, mean(.sigma, na.rm = TRUE))\n  )\n\n# for binary exposures\nglm(\n  exposure ~ 1,\n  data = df,\n  family = binomial()\n) |>\n  augment(type.predict = \"response\", data = df) |>\n  select(numerator = .fitted)\n```\n:::\n\n\nThen, rather than inverting them, we calculate the weights as `numerator / denominator`.\nLet's try it out on our posted wait times example.\nFirst, let's wrangle our data to address our question: do posted wait times at 8 affect actual weight times at 9?\nWe'll join the baseline data (all covariates and posted wait time at 8) with the outcome (average actual time).\nWe also have a lot of missingness for `wait_minutes_actual_avg`, so we'll drop unobserved values for now.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(touringplans)\neight <- seven_dwarfs_train_2018 |>\n  filter(wait_hour == 8) |>\n  select(-wait_minutes_actual_avg)\n\nnine <- seven_dwarfs_train_2018 |>\n  filter(wait_hour == 9) |>\n  select(park_date, wait_minutes_actual_avg)\n\nwait_times <- eight |>\n  left_join(nine, by = \"park_date\") |>\n  drop_na(wait_minutes_actual_avg)\n```\n:::\n\n\nFirst, let's calculate our denominator model.\nWe'll fit a model using `lm()` for `wait_minutes_posted_avg` with our covariates, then use the fitted predictions of `wait_minutes_posted_avg` (`.fitted`) to calculate the density using `dnorm()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(broom)\ndenominator_model <- lm(\n  wait_minutes_posted_avg ~\n    park_close + park_extra_magic_morning + park_temperature_high + park_ticket_season,\n  data = wait_times\n)\n\ndenominators <- denominator_model |>\n  augment(data = wait_times) |>\n  mutate(\n    denominator = dnorm(\n      wait_minutes_posted_avg,\n      .fitted,\n      mean(.sigma, na.rm = TRUE)\n    )\n  ) |>\n  select(park_date, denominator, .fitted)\n```\n:::\n\n\nWhen we only use the inverted values of `denominator`, we end up with several extreme weights:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndenominators |>\n  mutate(wts = 1 / denominator) |>\n  ggplot(aes(wts)) +\n  geom_histogram(fill = \"#E69F00\", color = \"white\", bins = 50) +\n  scale_x_log10(name = \"weights\")\n```\n\n::: {.cell-output-display}\n![A histogram of the inverse probability weights for posted waiting time. Weights for continuous exposures are prone to extreme values, which can unstabilize estimates and variance.](13-continuous-exposures_files/figure-html/fig-hist-sd-unstable-1.png){#fig-hist-sd-unstable width=672}\n:::\n:::\n\n\nIn @fig-hist-sd-unstable, we see several weights over 100 and one over 10,000; these extreme weights will put undue stress on specific points, complicating the results we will estimate.\n\nLet's now fit the marginal density to use for stabilized weights:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumerator_model <- lm(\n  wait_minutes_posted_avg ~ 1,\n  data = wait_times\n)\n\nnumerators <- numerator_model |>\n  augment(data = wait_times) |>\n  mutate(\n    numerator = dnorm(\n      wait_minutes_posted_avg,\n      .fitted,\n      mean(.sigma, na.rm = TRUE)\n    )\n  ) |>\n  select(park_date, numerator)\n```\n:::\n\n\nWe also need to join the fitted values back to our original data set by date, then calculate the stabilized weights (`swts`) using `numerator / denominator`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwait_times_wts <- wait_times |>\n  left_join(numerators, by = \"park_date\") |>\n  left_join(denominators, by = \"park_date\") |>\n  mutate(swts = numerator / denominator)\n```\n:::\n\n\nThe stabilized weights are much less extreme.\nStabilized weights should have a mean close to 1 (in this example, it is `round(mean(wait_times_wts$swts), digits = 2)`); when that is the case, then the pseudo-population (that is, the equivalent number of observations after weighting) is equal to the original sample size.\nIf the mean is far from 1, we may have issues with model misspecification or positivity violations [@hernan2021].\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(wait_times_wts, aes(swts)) +\n  geom_histogram(fill = \"#E69F00\", color = \"white\", bins = 50) +\n  scale_x_log10(name = \"weights\")\n```\n\n::: {.cell-output-display}\n![A histogram of the stabilized inverse probability weights for posted waiting time. These weights are much more reasonable and will allow the outcome model to behave better.](13-continuous-exposures_files/figure-html/fig-hist-sd-stable-1.png){#fig-hist-sd-stable width=672}\n:::\n:::\n\n\nWhen we compare the exposure---average posted wait times---to the standardized weights, we still have one exceptionally high weight.\nIs this a problem, or is this a valid data point?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(wait_times_wts, aes(wait_minutes_posted_avg, swts)) +\n  geom_point(size = 3, color = \"grey80\", alpha = 0.7) +\n  geom_point(\n    data = function(x) filter(x, swts > 10),\n    color = \"firebrick\",\n    size = 3\n  ) +\n  geom_text(\n    data = function(x) filter(x, swts > 10),\n    aes(label = park_date),\n    size = 5,\n    hjust = 0,\n    nudge_x = -15.5,\n    color = \"firebrick\"\n  ) +\n  scale_y_log10() +\n  labs(x = \"Average Posted Wait\", y = \"Stabilized Weights\")\n```\n\n::: {.cell-output-display}\n![A scatter of the stabilized inverse probability weights for posted waiting time vs. posted waiting times. Days with more values of `wait_minutes_posted_avg` farther from the mean appear to be downweighted, with a few exceptions. The most unusual weight is for June 23, 2018.](13-continuous-exposures_files/figure-html/fig-stabilized-wts-scatter-1.png){#fig-stabilized-wts-scatter width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwait_times_wts |>\n  filter(swts > 10) |>\n  select(\n    park_date,\n    wait_minutes_posted_avg,\n    .fitted,\n    park_close,\n    park_extra_magic_morning,\n    park_temperature_high,\n    park_ticket_season\n  ) |>\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n|park_date  | wait_minutes_posted_avg| .fitted|park_close | park_extra_magic_morning| park_temperature_high|park_ticket_season |\n|:----------|-----------------------:|-------:|:----------|------------------------:|---------------------:|:------------------|\n|2018-06-23 |                      81|    28.1|24:00:00   |                        0|                 91.36|regular            |\n:::\n:::\n\n\nOur model predicted a much lower posted wait time than observed, so this date was upweighted.\nWe don't know why the posted time was so high (the actual time was much lower), but we did find an artist rendering from that date of [Pluto digging for Seven Dwarfs Mine Train treasure](https://disneyparks.disney.go.com/blog/2018/06/disney-doodle-pluto-sniffs-out-fun-at-seven-dwarfs-mine-train/).\n\n## Fitting the outcome model for continuous exposures\n",
    "supporting": [
      "13-continuous-exposures_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}